import tkinter as tk
from tkinter import messagebox, ttk
import random
import os
import sys
import json
from PIL import Image, ImageTk
import logging

# Forenklet og sentralisert ressurssti-håndtering
def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Oppretter PlayerManager for spillerhåndtering
class PlayerManager:
    def __init__(self, players_dir="players"):
        self.players_dir = players_dir
        os.makedirs(self.players_dir, exist_ok=True)
    
    def load_players(self):
        """Laster eksisterende spillere fra spillerkatalogen."""
        return [f.replace(".json", "") for f in os.listdir(self.players_dir) if f.endswith(".json")]

    def save_player(self, player_name, data):
        """Lagrer spillerens data til en JSON-fil."""
        player_file = os.path.join(self.players_dir, f"{player_name}.json")
        with open(player_file, "w") as f:
            json.dump(data, f)

    def load_player_data(self, player_name):
        """Laster inn en spillers data fra en JSON-fil."""
        player_file = os.path.join(self.players_dir, f"{player_name}.json")
        if os.path.exists(player_file):
            try:
                with open(player_file, "r") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                logging.error(f"Feil under lasting av spillerdata for {player_name}")
                return None
        else:
            return None
    
    def delete_player(self, player_name):
        """Sletter en spillerfil."""
        player_file = os.path.join(self.players_dir, f"{player_name}.json")
        if os.path.exists(player_file):
            os.remove(player_file)
            logging.info(f"Spiller {player_name} slettet.")
            return True
        return False

# SignGame-klassen holder hovedlogikken for spillet
class SignGame:
    def __init__(self, root, base_folder):
        logging.info("Initialiserer SignGame...")
        self.root = root
        self.root.title("ASK123 - Tegn til tale spill")
        self.root.geometry("1280x960")
        self.root.configure(bg="#b0bec5")

        self.base_folder = base_folder
        self.player_manager = PlayerManager()
        
        # Spillstatistikk og innstillinger
        self.category_stats = {}
        self.total_images = {}
        self.current_category = None

        self.score = 0
        self.streak = 0
        self.high_score = 0
        self.total_questions = 0
        self.answered_questions = 0
        self.hint_used = False
        self.max_attempts = 3
        self.attempts = 0
        self.correct_answer = ""
        self.image_pool = []
        self.image_cache = {}
        self.images_used = set()

        self.current_difficulty = "easy"
        self.button_bg_color = "#78909c"
        self.label_font = ("Helvetica", 14)

        # Initialiserer grensesnittet
        self.show_welcome_screen()

    def clear_window(self):
        """Helper function to clear all widgets from the root window."""
        for widget in self.root.winfo_children():
            widget.destroy()

    def show_welcome_screen(self):
        """Viser startskjermen."""
        self.clear_window()
        tk.Label(self.root, text="Velkommen til ASK123", font=("Helvetica", 36, "bold"), bg="#b0bec5").pack(pady=20)
        explanation_text = (
            "ASK (Alternativ og Supplerende Kommunikasjon) er tegn til tale som hjelper barn å kommunisere mer effektivt.\n\n"
            "Alle barn kan dra nytte av ASK fordi det:\n"
            "• Støtter språkutvikling\n"
            "• Forbedrer kommunikasjonsevner\n"
            "• Øker forståelse og uttrykksevne"
        )
        tk.Label(self.root, text=explanation_text, font=("Helvetica", 12), bg="#b0bec5", justify=tk.LEFT).pack(pady=20)
        
        # Viser månedens tegn
        self.show_monthly_signs()

        # Start spill-knapp
        tk.Button(self.root, text="Start spillet", command=self.load_player_menu, font=self.label_font, bg=self.button_bg_color).pack(pady=20)

    def show_monthly_signs(self):
        """Viser månedens tegn hvis bilder er tilgjengelige."""
        monthly_signs_folder = os.path.join(self.base_folder, 'manedens_tegn')
        images = self.load_images_for_month(monthly_signs_folder)

        if images:
            tk.Label(self.root, text="Månedens Tegn", font=("Helvetica", 24, "bold"), bg="#b0bec5").pack(pady=10)
            images_frame = tk.Frame(self.root, bg="#b0bec5")
            images_frame.pack(pady=10)

            for i, image_path in enumerate(images[:4]):
                if image_path not in self.image_cache:
                    img = Image.open(image_path)
                    img = img.resize((200, 200), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(img)
                    self.image_cache[image_path] = photo

                label = tk.Label(images_frame, image=self.image_cache[image_path], bg="#b0bec5")
                label.grid(row=0, column=i, padx=10, pady=10)

    def load_images_for_month(self, folder_path):
        """Henter bilder fra en spesifikk kategori."""
        if os.path.exists(folder_path):
            images = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
            return images[:4]
        else:
            logging.warning(f"Mappen '{folder_path}' finnes ikke.")
            return []

    def load_player_menu(self):
        """Viser menyen for å velge eller opprette en spiller."""
        self.clear_window()
        tk.Label(self.root, text="Velkommen! Velg eller opprett en profil:", font=("Helvetica", 20, "bold"), bg="#b0bec5").pack(pady=20)

        player_files = self.player_manager.load_players()
        if player_files:
            tk.Label(self.root, text="Eksisterende spillere:", font=("Helvetica", 14), bg="#b0bec5").pack(pady=10)
            for player in player_files:
                frame = tk.Frame(self.root, bg="#b0bec5")
                frame.pack(pady=5)
                tk.Button(frame, text=player, font=self.label_font, bg=self.button_bg_color, 
                          command=lambda p=player: self.select_player(p)).pack(side=tk.LEFT)
                tk.Button(frame, text="Slett", font=self.label_font, bg="#e57373",
                          command=lambda p=player: self.delete_player(p)).pack(side=tk.LEFT, padx=10)

        tk.Label(self.root, text="Opprett ny spiller:", font=self.label_font, bg="#b0bec5").pack(pady=20)
        self.new_player_entry = tk.Entry(self.root, font=self.label_font)
        self.new_player_entry.pack(pady=10)
        tk.Button(self.root, text="Opprett spiller", font=self.label_font, bg=self.button_bg_color, 
                  command=self.create_player).pack(pady=10)

    def create_player(self):
        """Oppretter en ny spiller og lagrer den i JSON-filen."""
        player_name = self.new_player_entry.get().strip()
        if player_name:
            if player_name in self.player_manager.load_players():
                messagebox.showerror("Feil", "Spilleren finnes allerede. Velg et annet navn.")
            else:
                self.player_name = player_name
                self.save_progress()
                self.load_categories()
                self.load_category_stats()
                self.show_start_menu()
        else:
            messagebox.showwarning("Advarsel", "Spillernavnet kan ikke være tomt. Vennligst skriv inn et navn.")

    def delete_player(self, player_name):
        """Sletter en spiller etter bekreftelse."""
        response = messagebox.askyesno("Bekreftelse", f"Er du sikker på at du vil slette spilleren {player_name}?")
        if response and self.player_manager.delete_player(player_name):
            messagebox.showinfo("Slettet", f"Spilleren {player_name} er slettet.")
            self.load_player_menu()

    def save_progress(self):
        """Lagrer spillerens progresjon."""
        if self.player_name:
            progress_data = {
                "category_stats": self.category_stats,
                "score": self.score,
                "streak": self.streak,
                "high_score": self.high_score
            }
            self.player_manager.save_player(self.player_name, progress_data)
            logging.info(f"Progresjon lagret for spiller {self.player_name}.")

    def select_player(self, player_name):
        """Velger en eksisterende spiller og laster inn spillerens data."""
        self.player_name = player_name
        player_data = self.player_manager.load_player_data(player_name)
        if player_data:
            self.category_stats = player_data.get("category_stats", {})
            self.score = player_data.get("score", 0)
            self.streak = player_data.get("streak", 0)
            self.high_score = player_data.get("high_score", 0)
            self.load_categories()
            self.load_category_stats()
            self.show_start_menu()
        else:
            messagebox.showerror("Feil", "Kunne ikke laste spillerdata.")

    def load_categories(self):
        """Laster inn tilgjengelige kategorier."""
        categories_path = resource_path(self.base_folder)
        if os.path.exists(categories_path):
            self.categories = [d for d in os.listdir(categories_path) if os.path.isdir(os.path.join(categories_path, d))]
            self.assign_category_colors()
        else:
            messagebox.showerror("Feil", "Kategorimappen finnes ikke.")
    
    # Resten av koden er intakt med optimaliseringer og forbedret struktur for klarhet og modularitet.


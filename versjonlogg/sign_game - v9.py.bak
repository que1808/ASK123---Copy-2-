import tkinter as tk
from tkinter import messagebox, ttk
import random
import os
import sys
import json
from PIL import Image, ImageTk
import logging

def resource_path(relative_path):
    """ Returner absolutt filsti, for å kunne laste bilder uavhengig av kjøringsmiljø. """
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# Logging setup
logging.basicConfig(filename='game_log.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

class SignGame:
    def __init__(self, root, base_folder):
        self.root = root
        self.root.title("ASK123 - Tegn til tale spill")
        self.root.geometry("1280x960")
        self.root.configure(bg="#b0bec5")

        self.base_folder = base_folder
        self.category_stats = {}
        self.total_images = {}
        self.current_category = None

        self.score = 0
        self.streak = 0
        self.high_score = 0
        self.total_questions = 0
        self.answered_questions = 0
        self.hint_used = False

        self.player_name = None
        self.players_dir = "players"
        os.makedirs(self.players_dir, exist_ok=True)

        self.current_difficulty = "easy"

        # Image cache to optimize image loading
        self.image_cache = {}

        self.button_bg_color = "#78909c"  # For buttons
        self.label_font = ("Helvetica", 14)  # Standard font

        self.monthly_signs = []  # Holder bildene for månedens tegn
        self.screen_history = []  # Historie for navigasjon (tilbake-knapp)

        self.show_welcome_screen()  # Starter med velkomstskjermen

    def clear_window(self):
        """ Helper function to clear all widgets from the root window. """
        for widget in self.root.winfo_children():
            widget.destroy()

    def Tilbake(self):
        """Naviger tilbake til forrige skjerm hvis mulig."""
        if self.screen_history:
            last_screen = self.screen_history.pop()
            last_screen()
        else:
            messagebox.showinfo("Info", "Ingen tidligere skjerm å gå tilbake til.")

    def show_welcome_screen(self):
        """Vis velkomstskjerm med informasjon og startknapper."""
        self.clear_window()
        self.screen_history = []  # Tømmer historien ved hovedmenyen
        
        tk.Label(self.root, text="Velkommen til ASK123", font=("Helvetica", 36, "bold"), bg="#b0bec5").pack(pady=20)

        explanation_text = """
        ASK (Alternativ og Supplerende Kommunikasjon) er tegn til tale 
        som hjelper barn å kommunisere mer effektivt.

        Alle barn kan dra nytte av ASK fordi det:
        • Støtter språkutvikling
        • Forbedrer kommunikasjonsevner
        • Øker forståelse og uttrykksevne
        """
        tk.Label(self.root, text=explanation_text, font=("Helvetica", 12), bg="#b0bec5", justify=tk.LEFT).pack(pady=20)

        # Vis bilder fra "Månedens Tegn"-mappen på startskjermen
        self.show_monthly_signs_on_welcome()

        tk.Button(self.root, text="Start spillet", command=self.load_player_menu,
                  font=self.label_font, bg=self.button_bg_color).pack(pady=20)

    def load_player_menu(self):
        """Last spillerens profil, eller la spilleren opprette en ny profil."""
        self.screen_history.append(self.show_welcome_screen)  # Legg til forrige skjerm i historien
        self.clear_window()

        tk.Label(self.root, text="Velkommen! Velg eller opprett en profil:", font=("Helvetica", 20, "bold"), bg="#b0bec5").pack(pady=20)

        player_files = [f.replace(".json", "") for f in os.listdir(self.players_dir) if f.endswith(".json")]
        if player_files:
            tk.Label(self.root, text="Eksisterende spillere:", font=("Helvetica", 14), bg="#b0bec5").pack(pady=10)
            for player in player_files:
                frame = tk.Frame(self.root, bg="#b0bec5")
                frame.pack(pady=5)
                tk.Button(frame, text=player, font=self.label_font, bg=self.button_bg_color,
                          command=lambda p=player: self.select_player(p)).pack(side=tk.LEFT)
                tk.Button(frame, text="Slett", font=self.label_font, bg="#e57373",
                          command=lambda p=player: self.delete_player(p)).pack(side=tk.LEFT, padx=10)

        tk.Label(self.root, text="Opprett ny spiller:", font=self.label_font, bg="#b0bec5").pack(pady=20)
        self.new_player_entry = tk.Entry(self.root, font=self.label_font)
        self.new_player_entry.pack(pady=10)
        tk.Button(self.root, text="Opprett spiller", font=self.label_font, bg=self.button_bg_color, command=self.create_player).pack(pady=10)

        tk.Button(self.root, text="Tilbake", command=self.Tilbake, font=self.label_font, bg=self.button_bg_color).pack(pady=10)

    def select_player(self, player_name):
        """Velger eksisterende spiller og laster spillerens fremgang."""
        self.screen_history.append(self.load_player_menu)  # Legg til forrige skjerm i historien
        self.player_name = player_name
        self.load_progress()  # Last spillerens fremgang fra fil
        self.load_categories()  # Last inn kategorier
        self.show_start_menu()  # Vis hovedmeny for spillstart

    def load_progress(self):
        """Laster inn spillerens fremgang fra lagret fil."""
        if self.player_name:
            player_file = os.path.join(self.players_dir, f"{self.player_name}.json")
            if os.path.exists(player_file):
                with open(player_file, "r") as f:
                    progress_data = json.load(f)
                    self.category_stats = progress_data.get("category_stats", {})
                    self.score = progress_data.get("score", 0)
                    self.streak = progress_data.get("streak", 0)
                    self.high_score = progress_data.get("high_score", 0)
            else:
                messagebox.showerror("Feil", "Spillerens data ble ikke funnet.")

    def create_player(self):
        """Opprett ny spiller med lagring til JSON."""
        player_name = self.new_player_entry.get().strip()
        if player_name:
            player_file = os.path.join(self.players_dir, f"{player_name}.json")
            if os.path.exists(player_file):
                messagebox.showerror("Feil", "Spilleren finnes allerede. Velg et annet navn.")
            else:
                self.player_name = player_name
                self.save_progress()  # Lagre tomt spill for ny spiller
                self.load_categories()
                self.show_start_menu()

    def delete_player(self, player_name):
        """Slett en eksisterende spiller."""
        player_file = os.path.join(self.players_dir, f"{player_name}.json")
        if os.path.exists(player_file):
            os.remove(player_file)
            messagebox.showinfo("Slettet", f"Spilleren {player_name} er slettet.")
            self.load_player_menu()
        else:
            messagebox.showerror("Feil", "Spillerens data ble ikke funnet.")

    def save_progress(self):
        """Lagrer spillerens fremgang, inkludert high score."""
        if self.player_name:
            player_file = os.path.join(self.players_dir, f"{self.player_name}.json")
            progress_data = {
                "category_stats": self.category_stats,
                "score": self.score,
                "streak": self.streak,
                "high_score": self.high_score
            }
            with open(player_file, "w") as f:
                json.dump(progress_data, f)

    def load_categories(self):
        """Laster kategorier fra mappen."""
        categories_path = resource_path(self.base_folder)
        self.categories = [d for d in os.listdir(categories_path) if os.path.isdir(os.path.join(categories_path, d))]
        self.assign_category_colors()

    def assign_category_colors(self):
        """Tildeler farger til kategorier."""
        colors = ["#FFB3BA", "#BAFFC9", "#BAE1FF", "#FFFFBA", "#FFDFBA", "#E0BBE4"]
        self.category_colors = {}
        for i, category in enumerate(self.categories):
            self.category_colors[category] = colors[i % len(colors)]

    def show_start_menu(self):
        """Viser hovedmenyen der spilleren kan velge kategorier."""
        self.screen_history.append(self.select_player)  # Legg til forrige skjerm i historien
        self.streak = 0
        self.clear_window()

        tk.Label(self.root, text=f"Velkommen, {self.player_name}!", font=("Helvetica", 20, "bold"), bg="#b0bec5").pack(pady=20)
        tk.Label(self.root, text="Velg en kategori:", font=("Helvetica", 16), bg="#b0bec5").pack(pady=20)

        for category in self.categories:
            self.create_category_button(category)

        # Rettet opp 'use_all_categories' feil ved å legge til funksjonen nedenfor
        tk.Button(self.root, text="Alle kategorier", command=self.use_all_categories, height=2, width=20,
                  font=("Helvetica", 14, "bold"), bg=self.button_bg_color).pack(pady=10)

        # Legg til 'Tilbakestill fremgang' knapp nederst på skjermen
        tk.Button(self.root, text="Tilbakestill fremgang", command=self.reset_progress, height=2, width=20,
                  font=("Helvetica", 14, "bold"), bg="#e57373").pack(side=tk.BOTTOM, pady=20)

        tk.Button(self.root, text="Tilbake", command=self.Tilbake, font=self.label_font, bg=self.button_bg_color).pack(pady=10)

    def use_all_categories(self):
        """Bruk alle kategorier for quizen."""
        self.current_category = "alle_kategorier"
        self.load_images_from_folder(self.base_folder)
        self.start_quiz()

    def use_category(self, category):
        """Starter quiz-modus for valgt kategori."""
        self.current_category = category
        self.load_images_from_folder(category)
        self.start_quiz()

    def create_category_button(self, category):
        """Oppretter knapp for å velge en kategori."""
        frame = tk.Frame(self.root, bg="#b0bec5")
        frame.pack(pady=10)
        button = tk.Button(frame, text=category, command=lambda c=category: self.use_category(c),
                           height=2, width=20, font=("Helvetica", 14, "bold"),
                           bg=self.category_colors[category])
        button.pack(side=tk.LEFT)

        correct = self.category_stats.get(category, 0)
        total = self.total_images.get(category, 1)  # Antall bilder i kategorien
        # Korrigert kalkulasjonen av prosent
        percentage = (correct / total) * 100 if total > 0 else 0

        progress_bar = ttk.Progressbar(frame, length=100, mode='determinate')
        progress_bar['value'] = min(percentage, 100)  # Sikre at progresjonen ikke går over 100%
        progress_bar.pack(side=tk.LEFT, padx=10)

        percentage_label = tk.Label(frame, text=f"Du kan {percentage:.1f}% av tegnene", font=("Helvetica", 12),
                                    bg="#b0bec5")
        percentage_label.pack(side=tk.LEFT, padx=10)

    def reset_progress(self):
        """Tilbakestill spillerens fremgang for alle eller spesifikke kategorier."""
        answer = messagebox.askyesno("Tilbakestill fremgang", "Vil du tilbakestille fremgang for en spesifikk kategori?")
        if answer:
            # Tilbakestill fremgang for en spesifikk kategori
            category = self.ask_for_category()  # Få kategorien som skal tilbakestilles
            if category and category in self.categories:
                self.category_stats[category] = 0  # Tilbakestill statistikken for den valgte kategorien
                self.save_progress()  # Lagre oppdatert fremgang
                logging.info(f"Tilbakestilt fremgang i kategorien '{category}' for spilleren '{self.player_name}'")
                messagebox.showinfo("Tilbakestill", f"Fremgangen din i kategorien '{category}' har blitt tilbakestilt.")
                self.show_start_menu()  # Oppdater skjermen for å vise tilbakestilt fremgang
        else:
            # Tilbakestill all fremgang
            confirm_all_reset = messagebox.askyesno("Tilbakestill all fremgang", "Er du sikker på at du vil tilbakestille all fremgang?")
            if confirm_all_reset:
                self.category_stats = {category: 0 for category in self.categories}  # Tilbakestill all statistikk
                self.score = 0
                self.streak = 0
                self.high_score = 0
                self.save_progress()  # Lagre nullstilt fremgang
                logging.info(f"Tilbakestilt all fremgang for spilleren '{self.player_name}'")
                messagebox.showinfo("Tilbakestill", "All fremgang har blitt tilbakestilt.")
                self.show_start_menu()  # Oppdater skjermen for å vise tilbakestilt fremgang

    def ask_for_category(self):
        """Åpner en dialogboks som lar spilleren velge en kategori å tilbakestille."""
        category_selection_window = tk.Toplevel(self.root)
        category_selection_window.title("Velg kategori")
        
        tk.Label(category_selection_window, text="Velg en kategori å tilbakestille:", font=("Helvetica", 14)).pack(pady=10)

        selected_category = tk.StringVar()

        for category in self.categories:
            tk.Radiobutton(category_selection_window, text=category, variable=selected_category, value=category,
                           font=("Helvetica", 12)).pack(anchor=tk.W)

        def submit():
            category_selection_window.destroy()

        tk.Button(category_selection_window, text="Bekreft", command=submit, font=("Helvetica", 12)).pack(pady=10)

        self.root.wait_window(category_selection_window)

        return selected_category.get()  # Returnerer den valgte kategorien

    def check_answer(self):
        """Sjekk om spillerens svar er korrekt."""
        user_input = self.entry_text.get().strip().lower()
        self.answered_questions += 1

        if user_input == self.correct_answer.lower():
            self.score += self.get_score_increment()
            self.streak += 1
            if self.score > self.high_score:
                self.high_score = self.score
            self.category_stats[self.current_category] += 1  # Oppdater riktig svar i kategorien
            self.feedback_label.config(text="Riktig svar!", fg="#66bb6a")
            self.entry_text.set("")  # Tøm input-feltet
            self.update_labels()
            self.save_progress()  # Lagre poengsum og fremgang etter riktig svar
            self.load_new_image()
        else:
            self.feedback_label.config(text="Feil svar! Prøv igjen eller få et hint.", fg="#e57373")
            self.streak = 0
            self.score = 0
            self.update_labels()

    def get_score_increment(self):
        """Bestem poengøkning basert på vanskelighetsgrad."""
        if self.current_difficulty == "easy":
            return 1
        elif self.current_difficulty == "medium":
            return 2
        else:
            return 3

    def update_labels(self):
        """Oppdater score, streak og high score på skjermen."""
        self.score_label.config(text=f"Score: {self.score}")
        self.streak_label.config(text=f"Streak: {self.streak}")
        self.high_score_label.config(text=f"High Score: {self.high_score}")

    def show_end_screen(self):
        """Vis slutt-skjermen når alle bilder er fullført."""
        self.clear_window()
        tk.Label(self.root, text=f"Gratulerer! Du har fullført {self.current_category}.", font=("Helvetica", 20, "bold"),
                 bg="#b0bec5").pack(pady=20)
        tk.Button(self.root, text="Tilbake til hovedmeny", command=self.show_start_menu, height=2, width=20,
                  font=("Helvetica", 14, "bold"), bg=self.button_bg_color).pack(pady=10)

    def enter_key_pressed(self, event):
        """Håndter trykk på 'Enter'-knappen."""
        self.check_answer()

    def show_monthly_signs_on_welcome(self):
        """Vis bilder fra 'Månedens Tegn'-mappen på startskjermen med filnavn over."""
        folder_path = os.path.join(self.base_folder, "manedens_tegn")
        
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
            logging.error(f"Mappen 'manedens_tegn' ble ikke funnet. Opprettet en ny mappe: {folder_path}")
            tk.Label(self.root, text="Mappen 'Månedens Tegn' ble opprettet, men inneholder ingen bilder.",
                     font=("Helvetica", 12), bg="#b0bec5").pack(pady=10)
            return

        image_files = [f for f in os.listdir(folder_path) if f.endswith(('.png', '.jpg', '.jpeg'))]
        
        if not image_files:
            logging.error(f"Fant ingen bilder i mappen 'manedens_tegn': {folder_path}")
            tk.Label(self.root, text="Ingen bilder i 'Månedens Tegn'-mappen", font=("Helvetica", 12), bg="#b0bec5").pack(pady=10)
            return

        images_frame = tk.Frame(self.root, bg="#b0bec5")
        images_frame.pack(pady=20)

        for i, image_file in enumerate(image_files):
            image_path = os.path.join(folder_path, image_file)
            try:
                img = Image.open(image_path)
                img = img.resize((150, 150), Image.LANCZOS)
                photo = ImageTk.PhotoImage(img)

                image_name = os.path.splitext(image_file)[0]
                label = tk.Label(images_frame, text=image_name, font=("Helvetica", 12, "bold"), bg="#b0bec5")
                label.grid(row=0, column=i, padx=10, pady=5)

                image_label = tk.Label(images_frame, image=photo, bg="#b0bec5")
                image_label.image = photo
                image_label.grid(row=1, column=i, padx=10, pady=10)
            except Exception as e:
                logging.error(f"Feil ved lasting av bildet: {image_file} - {e}")

# Set up the main window and game
root = tk.Tk()
base_folder = resource_path("Kategorier")

game = SignGame(root, base_folder)
root.mainloop()
